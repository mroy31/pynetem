#!/usr/bin/python3
# pynetem: network emulator
# Copyright (C) 2015-2019 Mickael Royer <mickael.royer@recherche.enac.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
import os
import logging
import signal
import argparse
import string
import random
import subprocess
import shlex

INSTALL_BIN_DIR = os.path.dirname(__file__)
binsuffix = os.path.basename(INSTALL_BIN_DIR)
INSTALL_MODE = 'source'
if binsuffix == 'bin':
    # Deejayd is installed, and not in source tree
    INSTALL_MODE = 'installed'
    INSTALL_PREFIX = INSTALL_BIN_DIR[:-len(binsuffix)]

random.seed()
parser = argparse.ArgumentParser(description='Network emulator console')
parser.add_argument(
    'project', metavar='PRJ', type=str, nargs="?",
    default=None, help='Path for the pnet project')
parser.add_argument(
    "-c", "--conf-file", type=str, dest="conffile",
    metavar="FILE", default=None,
    help="Specify a custom conf file")
parser.add_argument(
    "-v", "--version", action="store_true",
    dest="version", default=False,
    help="Display pynetem version and exit")
parser.add_argument(
    "-d", "--debug", action="store_true",
    dest="debug", default=False,
    help="Log more debug informations")
parser.add_argument(
    "--new", action="store_true", dest="create",
    default=False, help="Set to create a new project")
parser.add_argument(
    "--no-start", action="store_false",
    dest="start", default=True,
    help="Do not start the project at launch")
parser.add_argument(
    "--clean", action="store_true", dest="clean",
    default=False, help="Clean the netem env")
parser.add_argument(
    "--pull", action="store_true", dest="pull",
    default=False, help="Pull docker images")
parser.add_argument(
    "--client-only", action="store_true", dest="client_mode",
    default=False, help="Connect to an launched pynetem-server")
parser.add_argument(
    "-p", "--port", type=int, dest="port",
    metavar="P_NUMBER", default=10100, help="Port number")
args = parser.parse_args()


if __name__ == "__main__":
    log_format = '%(levelname)s: %(message)s'
    log_level = args.debug and logging.DEBUG or logging.INFO
    logging.basicConfig(format=log_format, level=log_level)

    from pynetem.ui.config import NetemConfig
    from pynetem.project import create_project
    from pynetem.console.cmd import NetemConsole
    from pynetem.daemon.client import NetemDaemonClient
    from pynetem import NetemError
    from pynetem import __version__, NETEM_ID, DOCKER_IMAGES

    # if asked, show version and quit
    if args.version:
        print(__version__)
        sys.exit()

    # add custom config parms
    if args.conffile:
        if not os.path.isfile(args.conffile):
            sys.exit("The config file does not exist.")
        NetemConfig.custom_conf = args.conffile

    config = NetemConfig.instance()

    # test the connection with the daemon and its version
    s_name = config.get("general", "daemon_socket")
    daemon = NetemDaemonClient().instance()
    daemon.set_socket_path(s_name)
    try:
        d_version = daemon.version()
    except NetemError:
        sys.exit("Unable to connect with the daemon, we have to quit")
    if d_version != __version__:
        sys.exit("Version mismatch between the client an the server: "
                 "%s != %s" % (d_version, __version__))

    # if asked clean old project and quit
    if args.clean:
        logging.info("Clean old pynetem project, please wait...")
        daemon.clean(NETEM_ID)
        sys.exit()

    # pull docker image commands
    if args.pull:
        logging.info("Pull docker images")
        for n_type in DOCKER_IMAGES:
            if n_type == "router":
                continue
            img = DOCKER_IMAGES[n_type]
            logging.info("Pull image {}, please wait...".format(img))
            daemon.docker_pull(img)
        sys.exit()

    if not args.client_mode:
        # load project
        if args.project is None:
            sys.exit("You need to provide a project with the extension .pnet")

        _, ext = os.path.splitext(args.project)
        if ext.lower() != ".pnet":
            sys.exit("Project %s has wrong ext" % args.project)
        if args.create:
            if os.path.isfile(args.project):
                sys.exit("Project %s already exist" % args.project)
            create_project(args.project)

        # launch the project in background with pynetem-server
        rnd_str = "".join(random.sample(string.ascii_lowercase, 2))
        netid = "%s%s" % (NETEM_ID, rnd_str)
        bin_path = INSTALL_MODE == "source" and "./" or ""
        cmd = "%spynetem-server --id %s --port %d %s" \
            % (bin_path, netid, args.port, args.project)
        result = subprocess.run(shlex.split(cmd), stderr=subprocess.PIPE)
        if result.returncode != 0:
            sys.exit("Unable to launch server: %s" % result.stderr)

    # install signal handlers
    def interrupt(s, f):
        print("\n To quit pynetem, simply enter quit in the console !")

    signal.signal(signal.SIGINT, interrupt)
    # start console
    console = NetemConsole(args.port)
    if args.start and not args.client_mode:
        # run the project
        console.do_run("")

    console.cmdloop()
