#!/usr/bin/python3
# pynetem: network emulator
# Copyright (C) 2015-2017 Mickael Royer <mickael.royer@recherche.enac.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
import os
import logging
import signal
import argparse
from pynetem.ui.config import NetemConfig
from pynetem.project import NetemProject
from pynetem.console import NetemConsole
from pynetem.daemon.client import NetemDaemonClient
from pynetem import NetemError
from pynetem.utils import get_exc_desc
from pynetem import __version__, NETEM_ID


parser = argparse.ArgumentParser(description='Network emulator')
parser.add_argument('project', metavar='PRJ', type=str, nargs="?",
                    default=None, help='Path for the pnet project')
parser.add_argument("-c", "--conf-file", type=str, dest="conffile",
                    metavar="FILE", default=None,
                    help="Specify a custom conf file")
parser.add_argument("-v", "--version", action="store_true",
                    dest="version", default=False,
                    help="Display pynetem version and exit")
parser.add_argument("-d", "--debug", action="store_true",
                    dest="debug", default=False,
                    help="Log more debug informations")
parser.add_argument("--new", action="store_true", dest="create",
                    default=False, help="Set to create a new project")
parser.add_argument("--no-start", action="store_false",
                    dest="start", default=True,
                    help="Do not start the project at launch")
parser.add_argument("--clean", action="store_true", dest="clean",
                    default=False, help="Clean the netem env")
args = parser.parse_args()


if __name__ == "__main__":
    # if asked, show version and quit
    if args.version:
        print(__version__)
        sys.exit()

    # add custom config parms
    if args.conffile:
        if not os.path.isfile(args.conffile):
            sys.exit("The config file does not exist.")
        NetemConfig.custom_conf = args.conffile

    config = NetemConfig.instance()
    log_format = '%(levelname)s: %(message)s'
    log_level = args.debug and logging.DEBUG or logging.INFO
    logging.basicConfig(format=log_format, level=log_level)

    # test the connection with the daemon and its version
    s_name = config.get("general", "daemon_socket")
    daemon = NetemDaemonClient().instance()
    daemon.set_socket_path(s_name)
    try:
        d_version = daemon.version()
    except NetemError:
        sys.exit("Unable to connect with the daemon, we have to quit")
    if d_version != __version__:
        sys.exit("Version mismatch between the client an the server: "
                 "%s != %s" % (d_version, __version__))

    # if asked clean old project and quit
    if args.clean:
        logging.info("Clean old pynetem project, please wait...")
        daemon.clean(NETEM_ID)
        sys.exit()

    # load project
    if args.project is None:
        sys.exit("You need to provide a project with the extension .pnet")

    if os.path.isfile(args.project):
        project = NetemProject.load(daemon, args.project)
    elif args.create:
        logging.info("Create empty project %s" % args.project)
        project = NetemProject.create(daemon, args.project)
    else:
        sys.exit("Error: project %s does not "
                 "exist" % os.path.abspath(args.project))

    if args.start:
        # check before load the topology
        try:
            project.topology.check()
        except NetemError as err:
            print(err)
            print("You must edit the topology before loading the project")
        else:
            try:
                project.load_topology()
            except NetemError as err:
                logging.error("An error happened during the loading of "
                              "project %s, close it and exit" % args.project)
                logging.error(err)
                project.close()
                sys.exit(1)
            except Exception:
                project.close()
                print(get_exc_desc())
                sys.exit("Unhandled excetion during the "
                         "load/create of project")

    console = NetemConsole(daemon, project=project)

    # install signal handlers
    def interrupt(s, f):
        print("\n To quit pynetem, simply enter quit in the console !")

    signal.signal(signal.SIGINT, interrupt)

    # start console
    console.cmdloop()
