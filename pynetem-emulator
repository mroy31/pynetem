#!/usr/bin/python3
# pynetem: network emulator
# Copyright (C) 2015-2017 Mickael Royer <mickael.royer@recherche.enac.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
import os
import logging
from optparse import OptionParser
from pynetem.ui.config import NetemConfig
from pynetem.project import NetemProject
from pynetem.console import NetemConsole
from pynetem.daemon.client import NetemDaemonClient
from pynetem import NetemError
from pynetem.utils import get_exc_desc
from pynetem import __version__


usage = "usage: %prog [options] <network file>"
parser = OptionParser(usage=usage)
parser.set_defaults(debug=False, conffile=None, version=False)
parser.add_option("-c", "--conf-file", type="string", dest="conffile",
                  metavar="FILE", help="Specify a custom conf file")
parser.add_option("-d", "--debug", action="store_true", dest="debug",
                  help="Log more debug informations")
parser.add_option("-v", "--version", action="store_true", dest="version",
                  help="Log more debug informations")
(options, args) = parser.parse_args()

if __name__ == "__main__":
    # if asked, show version and quit
    if options.version:
        print(__version__)
        sys.exit()

    if len(args) > 1:
        sys.exit("Too many arguments -> %s" % usage)

    # add custom config parms
    if options.conffile:
        if os.path.isfile(options.conffile):
            NetemConfig.custom_conf = options.conffile
        else:
            sys.exit("The config file does not exist.")

    config = NetemConfig.instance()
    log_format = '%(levelname)s: %(message)s'
    log_level = options.debug and logging.DEBUG or logging.INFO
    logging.basicConfig(format=log_format, level=log_level)

    # test the connection with the daemon and its version
    s_name = config.get("general", "daemon_socket")
    daemon = NetemDaemonClient().instance()
    daemon.set_socket_path(s_name)
    try:
        d_version = daemon.version()
    except NetemError:
        sys.exit("Unable to connect with the daemon, we have to quit")
    if d_version != __version__:
        sys.exit("Version mismatch between the client an the server: "
                 "%s != %s" % (d_version, __version__))

    project = None
    if len(args) == 1:
        prj_path = args[0]
        if os.path.isfile(prj_path):
            project = NetemProject.load(daemon, prj_path)
        else:
            logging.info("Create empty project %s" % prj_path)
            project = NetemProject.create(daemon, prj_path)

        try:
            project.load_topology()
        except NetemError as err:
            sys.exit("Unable to load/create project %s: %s" % (prj_path, err))
        except Exception as ex:
            print(get_exc_desc())
            daemon.clean(project.get_id())
            sys.exit("Unhandled excetion during the load/create of project")

    # start console
    console = NetemConsole(daemon, project=project)
    console.cmdloop()
