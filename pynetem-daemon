#!/usr/bin/python3

# pynetem: network emulator
# Copyright (C) 2015-2018 Mickael Royer <mickael.royer@recherche.enac.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import sys
import signal
import logging
import argparse
import time
from pynetem.utils import daemonize

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Network emulator daemon')
    parser.add_argument(
        "-c", "--conf-file", type=str, dest="conffile", metavar="FILE",
        default=None, help="Specify a custom conf file"
    )
    parser.add_argument(
        "-d", "--debug", action="store_true", dest="debug", default=False,
        help="Log more debug informations"
    )
    parser.add_argument(
        "-n", "--nodaemon", action="store_false", dest="daemon", default=True,
        help="No daemonize pynetem daemon"
    )
    parser.add_argument(
        "-l", "--log-file", type=str, dest="logfile",
        default=None, help="Clean the netem env"
    )
    args = parser.parse_args()

    # init log
    if args.daemon and args.logfile is None:
        args.logfile = "pynetem.log"
    log_format = '%(asctime)s - %(levelname)s: %(message)s'
    log_level = args.debug and logging.DEBUG or logging.INFO
    if args.logfile is None:
        logging.basicConfig(format=log_format, level=log_level)
    else:
        logging.basicConfig(format=log_format, level=log_level,
                            filename=args.logfile)
    # daemonize if necessary
    if args.daemon:
        daemonize()

    from pynetem.ui.config import NetemConfig
    from pynetem.daemon.server import NetemDaemonThread

    # add custom config parms
    if args.conffile:
        if os.path.isfile(args.conffile):
            NetemConfig.custom_conf = args.conffile
        else:
            sys.exit("The config file does not exist.")

    config = NetemConfig()
    socket = config.get('general', 'daemon_socket')
    # Make sure the socket does not already exist
    try:
        os.unlink(socket)
    except OSError:
        if os.path.exists(socket):
            sys.exit("The socket %s already exists" % socket)

    # start the server in a separate thread and install handler for SIGTERM
    server_thread = NetemDaemonThread(socket)

    def shutdown(s, f):
        server_thread.stop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        signal.signal(sig, shutdown)
    server_thread.start()

    # thread.join block signal, so implement our proper loop
    while server_thread.running:
        time.sleep(1)

    # wait until the thread is terminated
    server_thread.join()

    # finally remove socket
    try:
        os.unlink(socket)
    except OSError:
        logging.error("Unable to remove socket %s" % socket)
