#!/usr/bin/python3

# pynetem: network emulator
# Copyright (C) 2015-2018 Mickael Royer <mickael.royer@recherche.enac.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import sys
import signal
import errno
import logging
import time
from optparse import OptionParser
from pynetem.ui.config import NetemConfig
from pynetem.daemon.server import NetemDaemonThread


usage = "usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.set_defaults(daemon=True, logfile=None)
parser.add_option("-n", "--nodaemon", action="store_false", dest="daemon",
                  help="No daemonize pynetem daemon")
parser.add_option("-l", "--log-file", type="string", dest="logfile",
                  metavar="FILE", help="Specify the log file")
parser.add_option("-c", "--conf-file", type="string", dest="conffile",
                  metavar="FILE", help="Specify a custom conf file")
parser.add_option("-d", "--debug",
                  action="store_true", dest="debug",
                  help="Log more debug informations")

(options, args) = parser.parse_args()
# add custom config parms
if options.conffile:
    if os.path.isfile(options.conffile):
        NetemConfig.custom_conf = options.conffile
    else:
        sys.exit("The config file does not exist.")


def daemonize():
    if os.fork():    # launch child and...
        os._exit(0)  # kill off parent
    os.setsid()
    if os.fork():    # launch child and...
        os._exit(0)  # kill off parent again.
    os.umask(0o77)
    null = os.open('/dev/null', os.O_RDWR)
    for i in range(3):
        try:
            os.dup2(null, i)
        except OSError as e:
            if e.errno != errno.EBADF:
                raise
    os.close(null)


if __name__ == "__main__":
    config = NetemConfig()
    # init log
    if options.daemon and options.logfile is None:
        options.logfile = "pynetem.log"
    log_format = '%(asctime)s - %(levelname)s: %(message)s'
    log_level = options.debug and logging.DEBUG or logging.INFO
    if options.logfile is None:
        logging.basicConfig(format=log_format, level=log_level)
    else:
        logging.basicConfig(format=log_format, level=log_level,
                            filename=options.logfile)

    if options.daemon:
        daemonize()
    socket = config.get('general', 'daemon_socket')
    # Make sure the socket does not already exist
    try:
        os.unlink(socket)
    except OSError:
        if os.path.exists(socket):
            sys.exit("The socket %s already exists" % socket)

    # start the server in a separate thread and install handler for SIGTERM
    server_thread = NetemDaemonThread(socket)

    def shutdown(s, f):
        server_thread.stop()
    for sig in (signal.SIGTERM, signal.SIGINT, signal.SIGKILL):
        signal.signal(sig, shutdown)
    server_thread.start()

    # thread.join block signal, so implement our proper loop
    while server_thread.running:
        time.sleep(1)

    # wait until the thread is terminated
    server_thread.join()

    # finally remove socket
    try:
        os.unlink(socket)
    except OSError:
        logging.error("Unable to remove socket %s" % socket)
